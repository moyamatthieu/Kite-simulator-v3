/**
 * AutoLoader.ts - Chargement automatique R√âEL des objets depuis /src/objects
 * D√©couverte automatique via import.meta.glob - aucun import manuel requis !
 * Il suffit d'ajouter un fichier .ts dans /src/objects/ pour qu'il soit d√©tect√©
 */

import { StructuredObject } from '@core/StructuredObject';
import { ICreatable } from '@types';

// Types pour l'auto-loader
export interface ObjectInfo {
    id: string;
    name: string;
    description: string;
    className: string;
    instance: StructuredObject & ICreatable;
    folderPath?: string; // Dossier parent de l'objet
}

/**
 * AutoLoader - Chargement automatique R√âEL des objets 3D
 * Utilise import.meta.glob pour d√©couvrir automatiquement tous les fichiers .ts 
 * dans /src/objects/ et charge les classes qui impl√©mentent ICreatable
 * 
 * ‚ú® Plus besoin d'ajouter manuellement les imports !
 */
export class AutoLoader {
    private objects: Map<string, ObjectInfo> = new Map();
    private loadPromise: Promise<void> | null = null;
    
    constructor() {
        this.loadAllObjects();
    }
    
    /**
     * Charge automatiquement tous les objets du dossier objects
     */
    private async loadAllObjects(): Promise<void> {
        if (this.loadPromise) {
            return this.loadPromise;
        }
        
        this.loadPromise = this.doLoadAllObjects();
        return this.loadPromise;
    }
    
    private async doLoadAllObjects(): Promise<void> {
        try {
            // D√©couverte automatique des objets via import.meta.glob
            // Chercher dans tous les sous-dossiers de /src/objects/
            const objectModules = import.meta.glob('../objects/**/*.ts', { eager: true });
            
            for (const [filePath, module] of Object.entries(objectModules)) {
                // Extraire le nom du fichier (ex: Table.ts -> Table)
                const fileName = filePath.split('/').pop()?.replace('.ts', '') || '';
                
                // Ignorer le fichier index.ts s'il existe
                if (fileName === 'index') continue;
                
                // Extraire le dossier parent (ex: ../objects/furniture/Table.ts -> furniture)
                const pathParts = filePath.split('/');
                const folderName = pathParts[pathParts.length - 2] || 'uncategorized';
                
                const moduleObj = module as any;
                
                // Chercher la classe export√©e qui correspond au nom du fichier
                // Essayer d'abord avec la premi√®re lettre en majuscule (convention des classes)
                const classNameCapitalized = fileName.charAt(0).toUpperCase() + fileName.slice(1);
                const ObjectClass = moduleObj[classNameCapitalized] || moduleObj[fileName];
                
                if (ObjectClass && typeof ObjectClass === 'function') {
                    try {
                        // Cr√©er une instance de test pour v√©rifier que c'est un objet valide
                        const instance = new ObjectClass() as StructuredObject & ICreatable;
                        
                        // V√©rifier que l'objet impl√©mente les m√©thodes requises
                        if (typeof instance.getName === 'function' && 
                            typeof instance.getDescription === 'function' &&
                            typeof instance.create === 'function') {
                            
                            // G√©n√©rer un ID bas√© sur le nom du fichier (en minuscules)
                            const id = fileName.toLowerCase();
                            
                            // Enregistrer l'objet avec le dossier parent
                            this.objects.set(id, {
                                id,
                                name: instance.getName(),
                                description: instance.getDescription(),
                                className: fileName,
                                instance,
                                folderPath: folderName
                            });
                            
                            console.log(`‚úÖ Objet charg√© automatiquement: ${id} (${classNameCapitalized || fileName}) depuis ${folderName}/`);
                        } else {
                            console.warn(`‚ö†Ô∏è ${fileName} ne semble pas √™tre un objet ICreatable valide`);
                        }
                        
                    } catch (error) {
                        console.error(`‚ùå Erreur lors du chargement automatique de ${fileName}:`, error);
                    }
                } else {
                    const classNameCapitalized = fileName.charAt(0).toUpperCase() + fileName.slice(1);
                    console.warn(`‚ö†Ô∏è Aucune classe ${classNameCapitalized} ou ${fileName} trouv√©e dans ${filePath}`);
                }
            }
            
            console.log(`üéØ AutoLoader: ${this.objects.size} objets charg√©s automatiquement`);
            
        } catch (error) {
            console.error('‚ùå Erreur lors du chargement automatique des objets:', error);
        }
    }
    
    /**
     * Cr√©er une nouvelle instance d'un objet
     */
    async create(id: string): Promise<StructuredObject | null> {
        await this.loadAllObjects();
        
        const objectInfo = this.objects.get(id);
        if (!objectInfo) {
            console.warn(`‚ö†Ô∏è Objet '${id}' non trouv√©`);
            return null;
        }
        
        try {
            // Cr√©er une nouvelle instance de la classe
            const ObjectClass = objectInfo.instance.constructor as new() => StructuredObject & ICreatable;
            const newInstance = new ObjectClass();
            
            console.log(`üÜï Nouvelle instance cr√©√©e: ${id}`);
            return newInstance;
            
        } catch (error) {
            console.error(`‚ùå Erreur lors de la cr√©ation de '${id}':`, error);
            return null;
        }
    }
    
    /**
     * Obtenir les informations d'un objet
     */
    async getObjectInfo(id: string): Promise<ObjectInfo | null> {
        await this.loadAllObjects();
        return this.objects.get(id) || null;
    }
    
    /**
     * Lister tous les objets disponibles
     */
    async getAllObjects(): Promise<ObjectInfo[]> {
        await this.loadAllObjects();
        return Array.from(this.objects.values());
    }
    
    /**
     * Lister tous les IDs disponibles
     */
    async getAllIds(): Promise<string[]> {
        await this.loadAllObjects();
        return Array.from(this.objects.keys());
    }
    
    /**
     * V√©rifier si un objet existe
     */
    async has(id: string): Promise<boolean> {
        await this.loadAllObjects();
        return this.objects.has(id);
    }
    
    /**
     * Recharger tous les objets (pour hot reload)
     */
    async reload(): Promise<void> {
        console.log('üî• AutoLoader: Rechargement des objets...');
        this.objects.clear();
        this.loadPromise = null;
        await this.loadAllObjects();
    }
    
    /**
     * Obtenir les cat√©gories d'objets pour l'UI
     * D√©tection automatique bas√©e sur les DOSSIERS r√©els
     */
    async getCategories(): Promise<Record<string, ObjectInfo[]>> {
        await this.loadAllObjects();
        
        const categories: Record<string, ObjectInfo[]> = {};
        
        // Mapping des noms de dossiers vers des ic√¥nes et labels
        const categoryMap: Record<string, { icon: string, label: string }> = {
            'furniture': { icon: 'üè†', label: 'Mobilier' },
            'shapes': { icon: 'üî∫', label: 'Formes' },
            'mechanical': { icon: '‚öôÔ∏è', label: 'M√©caniques' },
            'organic': { icon: 'üå≥', label: 'Organiques' },
            'containers': { icon: 'üì¶', label: 'Contenants' },
            'toys': { icon: 'üéÆ', label: 'Jouets' },
            'sports': { icon: 'üèÉ', label: 'Sports' },
            'tools': { icon: 'üîß', label: 'Outils' },
            'vehicles': { icon: 'üöó', label: 'V√©hicules' },
            'buildings': { icon: 'üè¢', label: 'B√¢timents' },
            'electronics': { icon: 'üíª', label: '√âlectronique' },
            'nature': { icon: 'üåø', label: 'Nature' },
            'weapons': { icon: '‚öîÔ∏è', label: 'Armes' },
            'food': { icon: 'üçî', label: 'Nourriture' },
            'music': { icon: 'üéµ', label: 'Musique' },
            'space': { icon: 'üöÄ', label: 'Spatial' },
            'medical': { icon: 'üè•', label: 'M√©dical' }
        };
        
        // Cat√©goriser bas√© sur le DOSSIER r√©el de chaque objet
        for (const [id, objInfo] of this.objects.entries()) {
            const folderName = objInfo.folderPath || 'uncategorized';
            
            // Utiliser le mapping si le dossier est connu
            let categoryLabel = 'üî∫ Autres';
            if (categoryMap[folderName]) {
                const { icon, label } = categoryMap[folderName];
                categoryLabel = `${icon} ${label}`;
            } else {
                // Pour les nouveaux dossiers non pr√©d√©finis, cr√©er une cat√©gorie automatique
                // Capitaliser le nom du dossier
                const capitalizedFolder = folderName.charAt(0).toUpperCase() + folderName.slice(1);
                categoryLabel = `üìÅ ${capitalizedFolder}`;
            }
            
            // Cr√©er la cat√©gorie si elle n'existe pas
            if (!categories[categoryLabel]) {
                categories[categoryLabel] = [];
            }
            
            categories[categoryLabel].push(objInfo);
        }
        
        // Trier les cat√©gories pour avoir un ordre coh√©rent
        const sortedCategories: Record<string, ObjectInfo[]> = {};
        
        // Ordre de priorit√© pour les cat√©gories connues
        const priorityOrder = [
            'üè† Mobilier',
            'üî∫ Formes', 
            '‚öôÔ∏è M√©caniques',
            'üå≥ Organiques',
            'üì¶ Contenants',
            'üéÆ Jouets'
        ];
        
        // Ajouter d'abord les cat√©gories prioritaires
        for (const key of priorityOrder) {
            if (categories[key]) {
                sortedCategories[key] = categories[key];
            }
        }
        
        // Ajouter ensuite toutes les autres cat√©gories (y compris les nouvelles)
        Object.keys(categories)
            .filter(key => !priorityOrder.includes(key))
            .sort() // Trier alphab√©tiquement les autres
            .forEach(key => {
                sortedCategories[key] = categories[key];
            });
        
        console.log(`üìä Cat√©gories d√©tect√©es: ${Object.keys(sortedCategories).join(', ')}`);
        
        return sortedCategories;
    }
}
